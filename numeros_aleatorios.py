# -*- coding: utf-8 -*-
"""Numeros_aleatorios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DhVZF6VLt4ELgFI7rmvOXME1-1F9_jF9
"""

# aleatorios.py

"""
Nombre del alumno: Thomas Lessing Lasheras
Descripción del fichero: Este fichero contiene la implementación de un generador de números aleatorios basado en el algoritmo LGC (Generador Lineal Congruente).
Se implementan tanto una clase iteradora llamada Aleat como una función generadora aleat(). Ambas soluciones generan secuencias pseudoaleatorias de números en el rango 0 <= x_n < m.

La clase Aleat es un iterador que utiliza el método __next__() para generar los números aleatorios de la secuencia y tiene la capacidad de reiniciar la secuencia usando el método __call__().
La función generadora aleat() también implementa el algoritmo LGC de forma similar, pero permite reiniciar la secuencia usando el método send().

Pruebas unitarias:
- La clase Aleat y la función generadora aleat() tienen pruebas unitarias que se pueden ejecutar mediante doctest.
"""

class Aleat:
    """
    Clase para la generación de números aleatorios usando el algoritmo LGC (Generador Lineal Congruente).

    El generador de la clase Aleat produce una secuencia de números aleatorios en el rango [0, m).
    La secuencia sigue la fórmula recursiva:
    x_(n+1) = (a * x_n + c) % m

    Atributos:
    - m: El módulo (valor máximo para la secuencia generada, por defecto 2^48)
    - a: El multiplicador (por defecto 25214903917)
    - c: El incremento (por defecto 11)
    - x: La semilla inicial (por defecto 1212121)

    Métodos:
    - __next__: Genera el siguiente número aleatorio en la secuencia.
    - __call__: Reinicia la secuencia con una nueva semilla.

    Pruebas unitarias:
    >>> rand = Aleat(m=32, a=9, c=13, x0=11)
    >>> for _ in range(4):
    ...     print(next(rand))
    16
    29
    18
    15

    >>> rand(29)
    >>> for _ in range(4):
    ...     print(next(rand))
    18
    15
    20
    1
    """

    def __init__(self, m=2**48, a=25214903917, c=11, x0=1212121):
        self.m = m
        self.a = a
        self.c = c
        self.x = x0

    def __next__(self):
        """
        Genera el siguiente número aleatorio en la secuencia.
        Utiliza la fórmula recursiva (a * x_n + c) % m.
        """
        self.x = (self.a * self.x + self.c) % self.m
        return self.x

    def __call__(self, x0):
        """
        Reinicia la secuencia con la nueva semilla proporcionada.
        """
        self.x = x0


def aleat(m=2**48, a=25214903917, c=11, x0=1212121):
    """
    Función generadora para la generación de números aleatorios usando el algoritmo LGC.

    La función aleat() genera una secuencia de números aleatorios en el rango [0, m),
    utilizando la fórmula recursiva:
    x_(n+1) = (a * x_n + c) % m

    Argumentos:
    - m: El módulo (valor máximo para la secuencia generada, por defecto 2^48)
    - a: El multiplicador (por defecto 25214903917)
    - c: El incremento (por defecto 11)
    - x0: La semilla inicial (por defecto 1212121)

    Retorna:
    - Un generador que produce números aleatorios.

    Pruebas unitarias:
    >>> rand = aleat(m=64, a=5, c=46, x0=36)
    >>> for _ in range(4):
    ...     print(next(rand))
    34
    24
    38
    44

    >>> rand.send(24)
    38
    >>> for _ in range(4):
    ...     print(next(rand))
    44
    10
    32
    14
    """

    x = x0
    while True:
        # Genera el siguiente número aleatorio
        x = (a * x + c) % m
        new_seed = yield x
        if new_seed is not None:
            # Reinicia la secuencia con la nueva semilla
            x = new_seed



if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True)
